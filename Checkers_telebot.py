import telebot
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
from keyboa import Keyboa
import sqlite3
from contextlib import closing
import sys
import pathlib
from copy import deepcopy
import operator
operatorlookup = {
    '+': operator.add,
    '-': operator.sub
}

first_player = 0 #–ù–∏–∫–Ω–µ–π–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
id_fplayer = 0
second_player = 0 #–ù–∏–∫–Ω–µ–π–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
id_splayer = 0
invite_player = 0
step = int(0) #–°—á—ë—Ç —Ö–æ–¥–æ–≤
stage = int(0) #–°—Ç–∞–¥–∏—è —Ö–æ–¥–∞, 0 - –≤—ã–±–æ—Ä —à–∞—à–∫–∏, 1 - –≤—ã–±–æ—Ä –∫—É–¥–∞ –µ–π –∏–¥—Ç–∏
position = [0, 0] #–ú–∞—Å—Å–∏–≤ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —à–∞—à–∫–∏
bot = telebot.TeleBot('–í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');  #–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
possibility_of_the_continuations = bool(0)

database = 'users_statistic.db'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():

    script_path = pathlib.Path(sys.argv[0]).parent
    db_path = script_path / 'users_statistic.db'

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path, check_same_thread=False)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            user_id INTEGER UNIQUE,
            username TEXT,
            rating INTEGER,
            quantity INTEGER,
            win INTEGER,
            lose INTEGER,
            draw INTEGER
        )
    ''')

    conn.commit()
    return conn, cursor


# –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
conn, cursor = init_db()

#–ó–∞–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
def db_table_val(user_id: int, rating: int, quantity: int, win: int, lose: int, draw: int):
    cursor.execute('INSERT INTO users (user_id, rating, quantity, win, lose, draw) VALUES (?, ?, ?, ?, ?, ?)', (user_id, rating, quantity, win, lose, draw))
    conn.commit()

#–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–∞–∑–µ
def user_exists(user_id):
    result = cursor.execute("SELECT `id` FROM `users` WHERE `user_id` = ?", (user_id,))
    return bool(len(result.fetchall()))

#–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏–≥—Ä—ã
def update_table(user_id, itog):
    with closing(sqlite3.connect(database)) as connection:
        connection.row_factory = sqlite3.Row
        cursor.execute("SELECT  * FROM `users` ")
        for i in cursor.fetchall():
            # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–µ
            if user_id == i[1]:
                rating = i[2]
                quantity = i[3]
                win = i[4]
                lose = i[5]
                draw = i[6]
 
    if itog == 0:
        rating -= 30
        quantity += 1
        lose += 1
    elif itog == 1:
        quantity += 1
        draw += 1
    elif itog == 2:
        rating += 30
        quantity += 1
        win += 1
    cursor.execute("UPDATE users SET rating =  ?, quantity = ?, win = ?, lose = ?, draw = ? WHERE user_id = ?", (rating, quantity, win, lose, draw, user_id,))
    conn.commit()

#–û–±–Ω—É–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
def end_game():
    global field
    global defoult_field
    global step
    global stage
    global first_player 
    global second_player
    global id_fplayer
    global id_splayer
    global position
    global invite_player
    global possibility_of_the_continuations
    field = deepcopy(defoult_field)
    step = 0
    stage = 0
    first_player = 0
    second_player = 0
    id_fplayer = 0
    id_splayer = 0
    position = [0, 0]
    invite_player = 0
    possibility_of_the_continuations = 0

#–º–∞—Å—Å–∏–≤ —Å–ª–æ–≤–∞—Ä–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–ø—Ç –≤ —Å–µ–±–µ —è—á–µ–π–∫—É —Å–æ —Å–≤–æ–µ–π "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π"
defoult_field = [
        {' ': 11}, {'‚ö´': 12}, {' ': 13}, {'‚ö´': 14}, {' ': 15}, {'‚ö´': 16}, {' ': 17}, {'‚ö´': 18},
        {'‚ö´': 21}, {' ': 22}, {'‚ö´': 23}, {' ': 24}, {'‚ö´': 25}, {' ': 26}, {'‚ö´': 27}, {' ': 28},
        {' ': 31}, {'‚ö´': 32}, {' ': 33}, {'‚ö´': 34}, {' ': 35}, {'‚ö´': 36}, {' ': 37}, {'‚ö´': 38},
        {' ': 41}, {' ': 42}, {' ': 43}, {' ': 44}, {' ': 45}, {' ': 46}, {' ': 47}, {' ': 48},
        {' ': 51}, {' ': 52}, {' ': 53}, {' ': 54}, {' ': 55}, {' ': 56}, {' ': 57}, {' ': 58},
        {'‚ö™': 61}, {' ': 62}, {'‚ö™': 63}, {' ': 64}, {'‚ö™': 65}, {' ': 66}, {'‚ö™': 67}, {' ': 68},
        {' ': 71}, {'‚ö™': 72}, {' ': 73}, {'‚ö™': 74}, {' ': 75}, {'‚ö™': 76}, {' ': 77}, {'‚ö™': 78},
        {'‚ö™': 81}, {' ': 82}, {'‚ö™': 83}, {' ': 84}, {'‚ö™': 85}, {' ': 86}, {'‚ö™': 87}, {' ': 88},
        {'–°–¥–∞—Ç—å—Å—è': 'capitulate'}, {'–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∏—á—å—é': 'draw'}]

field = deepcopy(defoult_field)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands = ['start'])
def launch(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤–≤–µ–¥–∏—Ç–µ /play. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /rules')
   
#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /play
@bot.message_handler(commands = ['play'])
def launch(message):
    global first_player
    global id_fplayer
    markup = types.InlineKeyboardMarkup();
    btn1 = types.InlineKeyboardButton(text = 'üåö –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data= 'start')
    markup.add(btn1)
    btn2 = types.InlineKeyboardButton(text = '–û—Ç–º–µ–Ω–∞', callback_data = 'close')
    markup.add(btn2)
    first_player = message.from_user.first_name
    id_fplayer = message.from_user.id
    #–ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–≤–π –∏–≥—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if user_exists(message.from_user.id) == 0:
        db_table_val(message.from_user.id, 1000, 0, 0, 0, 0)
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
    else:
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}!".format(message.from_user), reply_markup=markup)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rules
@bot.message_handler(commands = ['rules'])
def rules(message):
    bot.send_message(message.chat.id, """
–≠—Ç–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —à–∞—à–∫–∏.
–®–∞—à–∫–∏ —Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä—ë–¥. 
–ü—Ä–æ—Å—Ç–∞—è —à–∞—à–∫–∞ –±—å—ë—Ç —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä—ë–¥ , "–ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞—è" —á–µ—Ä–µ–∑ —à–∞—à–∫—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ.
–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–∏—Ç—å, —Ç–æ –±–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
–î–∞–º–∫–∞ —Ö–æ–¥–∏—Ç –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–∑–∞–¥ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏. –î–∞–º–∫–∞ –±—å—ë—Ç –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–∑–∞–¥.
–í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –ø—Ä–æ—Å—Ç–∞—è —à–∞—à–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –¥–∞–º–∫—É.""")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /agree
@bot.message_handler(commands = ['agree']) 
def agree(message):
    global first_player
    global second_player
    global id_fplayer
    global id_splayer
    global invite_player
    print(invite_player)
    print(id_fplayer)
    print(id_splayer)
    print(message.from_user.id)
    print(message.text)
    if invite_player == id_fplayer and message.from_user.id == id_splayer:
        bot.send_message(message.chat.id, '–ù–∏—á—å—è! –ò–≥—Ä–æ–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏')  
        update_table(id_splayer, 1) 
        update_table(id_fplayer, 1)   
        end_game()   
        return       
    if invite_player == id_splayer and message.from_user.id == id_fplayer:
        bot.send_message(message.chat.id, '–ù–∏—á—å—è! –ò–≥—Ä–æ–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏')  
        update_table(id_splayer, 1) 
        update_table(id_fplayer, 1)  
        end_game()
        return     

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ 'üåö –ù–∞—á–∞—Ç—å –∏–≥—Ä—É'
@bot.callback_query_handler(func=lambda call: call.data == 'start')
def add_second_player(call):
    global first_player
    markup = types.InlineKeyboardMarkup();
    btn1 = types.InlineKeyboardButton(text = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä—Ç–∏–∏', callback_data= 'join')
    markup.add(btn1)
    bot.send_message(call.message.chat.id, "–ò–≥—Ä–æ–∫ –∂–¥—ë—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞", reply_markup=markup)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'
@bot.callback_query_handler(func=lambda call: call.data == 'close')  
def close(call):

     bot.send_message( call.message.chat.id, "–î–æ –≤—Å—Ç—Ä–µ—á–∏, " + str(call.from_user.first_name))
     end_game()
     return 

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä—Ç–∏–∏'
@bot.callback_query_handler(func=lambda call: call.data == 'join')        
def start_game(call):
    global field
    global second_player
    global id_splayer
    """–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ call.from_user.id == id_fplayer –µ—Å–ª–∏ –Ω–∞–¥–æ –ø–æ—Ç–µ—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–º—É"""
    if call.from_user.id != id_fplayer:
        #–ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if user_exists(call.from_user.id) == 0:
            db_table_val(call.from_user.id, 1000, 0, 0, 0, 0)
        second_player = call.from_user.first_name
        id_splayer = call.from_user.id
        game = Keyboa(items=field, copy_text_to_callback=True, items_in_row=8)

        bot.send_message(call.message.chat.id, '—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ ' +str(first_player) +'!', reply_markup=game())
    

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–°–¥–∞—Ç—å—Å—è'
@bot.callback_query_handler(func=lambda call: call.data == 'capitulate')        
def capitulate(call):
    global first_player
    global second_player
    global id_fplayer
    global id_splayer

    if (call.from_user.first_name == second_player):
        bot.send_message(call.message.chat.id, '–≤—ã–∏–≥—Ä–∞–ª  ' +str(first_player) +'!!!. –û–Ω –ø–æ–ª—É—á–∞–µ—Ç +30 —Ä–µ–π—Ç–∏–Ω–≥–∞.')  
        update_table(id_fplayer, 2) 
        update_table(id_splayer, 0)
        end_game()
        return 

    elif (call.from_user.first_name == first_player):
        bot.send_message(call.message.chat.id, '–≤—ã–∏–≥—Ä–∞–ª  ' +str(second_player) +'!!!. –û–Ω –ø–æ–ª—É—á–∞–µ—Ç +30 —Ä–µ–π—Ç–∏–Ω–≥–∞.')  
        update_table(id_splayer, 2) 
        update_table(id_fplayer, 0)
        end_game()
        return 

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∏—á—å—é'
@bot.callback_query_handler(func=lambda call: call.data == 'draw')        
def draw(call):
    global invite_player
    if call.from_user.id == id_fplayer or call.from_user.id == id_splayer: 
        invite_player = call.from_user.id
        bot.send_message(call.message.chat.id, '–ò–≥—Ä–æ–∫ ' +str(call.from_user.first_name) +' –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∏—á—å—é. –ù–∞–ø–∏—à–∏—Ç–µ /agree –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã.') 


              

#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def steps(call):
    global step
    global first_player
    global second_player
    global stage 
    global field
    global position
    global id_fplayer
    global id_splayer
    validate = 1
    global possibility_of_the_continuations

    if  (step % int(2) == 0):
        antikey = '‚ö´'
        antidamkey = '‚¨õ'
        key = '‚ö™'
        damkey = '‚¨ú'
        player = first_player
        player_2 = second_player
        id_player1 = id_fplayer
        id_player2 = id_splayer
    else:
        antikey = '‚ö™'
        antidamkey = '‚¨ú'
        key = '‚ö´'
        damkey = '‚¨õ'
        player = second_player
        player_2 = first_player
        id_player1 = id_splayer
        id_player2 = id_fplayer 
    
    places_of_player = []
    for index, dict_ in enumerate(field):
        if key in dict_ or damkey in dict_:
            places_of_player += list(dict_.values())

    places_of_player2_end = 0  
    places_of_player2 = 0
    for index, dict_ in enumerate(field):
        if antikey in dict_ or antidamkey in dict_:
            places_of_player2 += 1

    if len(list(dict_.values())) == 0:
        bot.send_message(call.message.chat.id, '–≤—ã–∏–≥—Ä–∞–ª  ' +str(player_2) +'!!!. –û–Ω –ø–æ-–ª—É—á–∞–µ—Ç +30 —Ä–µ–π—Ç–∏–Ω–≥–∞.')
        update_table(id_player2, 2) 
        update_table(id_player1, 0)
        end_game()
        return 
    if places_of_player2 == 0:
        bot.send_message(call.message.chat.id, '–≤—ã–∏–≥—Ä–∞–ª  ' +str(player) +'!!!. –û–Ω –ø–æ–ª—É-—á–∞–µ—Ç +30 —Ä–µ–π—Ç–∏–Ω–≥–∞.')
        update_table(id_player1, 2) 
        update_table(id_player2, 0)
        end_game()
        return 

    if (call.from_user.first_name == player):
        if stage == 0:
            position[stage] = int(call.data)
            if position[stage] in places_of_player:
                stage = 1
        elif stage == 1 and possibility_of_the_continuations == 0:
            position[stage]  = int(call.data) 
            if position[stage] in places_of_player:
                position[stage-1] = position[stage]
                position[stage] = 0
            
            elif bool(check_motion()) == 1 and position[1] != 0:
                if bool(opportunity_to_eat(validate)) != 1:
                    game = Keyboa(items=field, copy_text_to_callback=True, items_in_row=8)
                    bot.send_message(call.message.chat.id, '—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ ' +str(player_2) +'!', reply_markup=game())
                    position = [0, 0]
                    stage = 0
                    possibility_of_the_continuations = 0 
                    step += 1
                      
                else:
                    for index, dict_ in enumerate(field):
                        if antikey in dict_ or antidamkey in dict_:
                            places_of_player2_end += 1
                    if places_of_player2_end < places_of_player2:
                        game = Keyboa(items=field, copy_text_to_callback=True, items_in_row=8)
                        bot.send_message(call.message.chat.id, '–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç '+ str(player) +'!', reply_markup=game())   
                        possibility_of_the_continuations = 1 
                    else:
                        game = Keyboa(items=field, copy_text_to_callback=True, items_in_row=8)
                        bot.send_message(call.message.chat.id, '—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ ' +str(player_2) +'!', reply_markup=game())
                        position = [0, 0]
                        stage = 0
                        possibility_of_the_continuations = 0 
                        step += 1    
                
        elif stage == 1 and possibility_of_the_continuations == 1:
            position[stage-1] = position[stage]
            position[stage]  = int(call.data) 
            if bool(check_motion()) == 1 and position[1] != 0:
                if bool(opportunity_to_eat(validate)) != 1:
                    game = Keyboa(items=field, copy_text_to_callback=True, items_in_row=8)
                    bot.send_message(call.message.chat.id, '—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ ' +str(player_2) +'!', reply_markup=game())
                    position = [0, 0]
                    stage = 0
                    possibility_of_the_continuations = 0 
                    step += 1
                    
                else:
                    for index, dict_ in enumerate(field):
                        if antikey in dict_ or antidamkey in dict_:
                            places_of_player2_end += 1
                    if places_of_player2_end < places_of_player2:
                        game = Keyboa(items=field, copy_text_to_callback=True, items_in_row=8)
                        bot.send_message(call.message.chat.id, '–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç '+ str(player) +'!', reply_markup=game())   
                        possibility_of_the_continuations = 1 
                    else:
                        game = Keyboa(items=field, copy_text_to_callback=True, items_in_row=8)
                        bot.send_message(call.message.chat.id, '—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ ' +str(player_2) +'!', reply_markup=game())
                        position = [0, 0]
                        stage = 0
                        possibility_of_the_continuations = 0 
                        step += 1           

            

#–ü—Ä–æ–≤–µ—Ä–∫–∞, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –ª–∏ —Ö–æ–¥ –ø—Ä–∞–≤–∏–ª–∞–º
def check_motion():
    global position
    global field
    global step
    validate= 0
    x = 0 
    
    if  (step % int(2) == 1):
        antikey = '‚ö™'
        antidamkey = '‚¨ú'
        key = '‚ö´'
        damkey = '‚¨õ'
        sign = '-'
        antisign = '+'
        last_row = [81, 82, 83, 84, 85, 86, 87, 88]
    else:
        antikey = '‚ö´'
        antidamkey = '‚¨õ'
        key = '‚ö™'
        damkey = '‚¨ú'
        sign = '+'    
        antisign = '-'
        last_row = [11, 12, 13, 14, 15, 16, 17, 18]

    op = operatorlookup.get(sign)
    antiop = operatorlookup.get(antisign)
    for index, dict_ in enumerate(field):
        if list(dict_.values())[0] == position[0]:
            if dict_.get(key):
                
                #–ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—ä–µ–ª —Ñ–∏–≥—É—Ä—É
                if position[0] == op(position[1], 22) or  position[0] == op(position[1], 18): #or position[0] == antiop(position[1], 22) or position[0] == antiop(position[1], 18):
                    for index, dict_ in enumerate(field):
                        if list(dict_.values())[0] == position[1]:
                            if ' ' in dict_: continue
                            else: return False
                    for index1, dict1 in enumerate(field):
                        if list(dict1.values())[0] == position[0]:
                            dict1[' '] = dict1.pop(key) 
                            for index2, dict2 in enumerate(field):
                                if list(dict2.values())[0] == position[1]:
                                    dict2[key] = dict2.pop(' ')

                                    for index3, dict3 in enumerate(field):
                                        if list(dict3.values())[0] == int(((position[0] + position[1])/2)) and ((antikey in dict3) or (antidamkey in dict3)):
                                            if antikey in dict3:
                                                dict3[' '] = dict3.pop(antikey)
                                            elif antidamkey in dict3:
                                                dict3[' '] = dict3.pop(antidamkey)
                                            x = 1
                                            break
                                    if x == 0: return False

                #–ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π, —á—Ç–æ –∏–≥—Ä–æ–∫ –ø—Ä–æ—Å—Ç–æ —Å—Ö–æ–¥–∏–ª     
                                
                elif (position[0] == op(position[1], 9) or  position[0] == op(position[1], 11)):
                    if  bool(opportunity_to_eat(validate)) == 1 : return False
                    for index, dict_ in enumerate(field):
                        if list(dict_.values())[0] == position[1]:
                            if ' ' in dict_: continue
                            else: return False
                    for index1, dict1 in enumerate(field):
                
                        if list(dict1.values())[0] == position[0]:
                            dict1[' '] = dict1.pop(key)
                            for index2, dict1 in enumerate(field):
                                if list(dict1.values())[0] == position[1]:
                                    dict1[key] = dict1.pop(' ')       
                else: return False

                #–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–æ–Ω—Ü–∞ –ø–æ–ª—è –∏ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–º–∫–æ–π
                if position[1] in last_row:
                    for index, dict_ in enumerate(field):
                                if list(dict_.values())[0] == position[1]:
                                    dict_[damkey] = dict_.pop(key)
                return True

            elif dict_.get(damkey):
                #–ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—ä–µ–ª —Ñ–∏–≥—É—Ä—É
                if position[0] == op(position[1], 22) or  position[0] == op(position[1], 18) or position[0] == antiop(position[1], 22) or position[0] == antiop(position[1], 18):
                    for index, dict_ in enumerate(field):
                        if list(dict_.values())[0] == position[1]:
                            if ' ' in dict_: continue
                            else: return False
                    for index1, dict1 in enumerate(field):
                        if list(dict1.values())[0] == position[0]:
                            dict1[' '] = dict1.pop(damkey)    
                            for index2, dict2 in enumerate(field):
                                if list(dict2.values())[0] == position[1]:
                                    dict2[damkey] = dict2.pop(' ')

                                    for index3, dict3 in enumerate(field):
                                        if list(dict3.values())[0] == int(((position[0] + position[1])/2)) and ((antikey in dict3) or (antidamkey in dict3)):
                                            if antikey in dict3:
                                                dict3[' '] = dict3.pop(antikey)
                                            elif antidamkey in dict3:
                                                dict3[' '] = dict3.pop(antidamkey)
                                            x = 1
                                            break
                                    if x == 0: return False

                #–ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π, —á—Ç–æ –∏–≥—Ä–æ–∫ –ø—Ä–æ—Å—Ç–æ —Å—Ö–æ–¥–∏–ª                      
                elif (position[0] == op(position[1], 9) or  position[0] == op(position[1], 11) or position[0] == antiop(position[1], 9) or position[0] == antiop(position[1], 11)):
                    if  bool(opportunity_to_eat(validate)) == 1 : return False
                    for index, dict_ in enumerate(field):
                        if list(dict_.values())[0] == position[1]:
                            if ' ' in dict_: continue
                            else: return False
                    for index1, dict1 in enumerate(field):
                
                        if list(dict1.values())[0] == position[0]:
                            dict1[' '] = dict1.pop(damkey)
                            for index2, dict1 in enumerate(field):
                                if list(dict1.values())[0] == position[1]:
                                    dict1[damkey] = dict1.pop(' ')       
                else: return False
                return True


#–ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—ä–µ—Å—Ç—å
def opportunity_to_eat(validate):
    global position
    global field
    global step

    if  (step % int(2) == 1):
        antikey = '‚ö™'
        antidamkey = '‚¨ú'
        key = '‚ö´'
        damkey = '‚¨õ'
        sign = '-'
        antisign = '+'
    else:
        antikey = '‚ö´'
        antidamkey = '‚¨õ'
        key = '‚ö™'
        damkey = '‚¨ú'
        sign = '+'
        antisign = '-'

    op = operatorlookup.get(sign)
    antiop = operatorlookup.get(antisign)

    if validate == 0:
        for index, dict_ in enumerate(field):
            if key  in dict_:
                for index1, dict1 in enumerate(field):
                    if  (list(dict1.values())[0] == antiop(list(dict_.values())[0], 9) and ((antikey in dict1) or (antidamkey in dict1)) or 
                    (list(dict1.values())[0] == antiop(list(dict_.values())[0], 11) and ((antikey in dict1) or (antidamkey in dict1)))):
                        for index2, dict2 in enumerate(field):
                            if ((list(dict2.values())[0] == antiop(list(dict1.values())[0], 11) and list(dict1.values())[0] == antiop(list(dict_.values())[0], 11) and (' ' in dict2)) or
                            (list(dict2.values())[0] == antiop(list(dict1.values())[0], 9) and list(dict1.values())[0] == antiop(list(dict_.values())[0], 9) and (' ' in dict2)))and ((antikey in dict1) or (antidamkey in dict1)):
                                return True
            elif damkey in dict_:     
                for index1, dict1 in enumerate(field):
                    if (list(dict1.values())[0] == list(dict_.values())[0] + 11 or
                    list(dict1.values())[0] == list(dict_.values())[0] - 11 or
                    list(dict1.values())[0] == list(dict_.values())[0] + 9 or
                    list(dict1.values())[0] == list(dict_.values())[0] - 9) and ((antikey in dict1) or (antidamkey in dict1)):

                        for index2, dict2 in enumerate(field):
                            if (list(dict2.values())[0] == list(dict1.values())[0] + 11 and (' ' in dict2) and (list(dict1.values())[0] == list(dict_.values())[0] + 11 or
                            (list(dict2.values())[0] == list(dict1.values())[0] - 11 and (' ' in dict2) and list(dict1.values())[0] == list(dict_.values())[0] - 11) or
                            (list(dict2.values())[0] == list(dict1.values())[0] + 9 and (' ' in dict2) and  list(dict1.values())[0] == list(dict_.values())[0] + 9) or
                            (list(dict2.values())[0] == list(dict1.values())[0] - 9 and (' ' in dict2) and list(dict1.values())[0] == list(dict_.values())[0] - 9))) and ((antikey in dict1) or (antidamkey in dict1)):
            
                                return True
        return False            
       
    elif validate == 1:
        x = 1
        for index1, dict1 in enumerate(field):
            for index, dict_ in enumerate(field):
                if dict_.get(key) == position[1]:
                    x = 1
                    break
                elif dict_.get(damkey) == position[1]:
                    x = 2
                    break
            if x == 2:
                if (list(dict1.values())[0] ==position[1] + 11 or
                list(dict1.values())[0] ==position[1] - 11 or
                list(dict1.values())[0] ==position[1] + 9 or
                list(dict1.values())[0] ==position[1] - 9) and ((antikey in dict1) or (antidamkey in dict1)):
                    for index2, dict2 in enumerate(field):
                        if ((list(dict2.values())[0] ==position[1] + 22 and list(dict2.values())[0] == list(dict1.values())[0] + 11 and ' ' in dict2) or
                        (list(dict2.values())[0] ==position[1] - 22  and list(dict2.values())[0] == list(dict1.values())[0] - 11 and ' ' in dict2) or
                        (list(dict2.values())[0] ==position[1] + 18 and list(dict2.values())[0] == list(dict1.values())[0] + 9 and ' ' in dict2) or
                        (list(dict2.values())[0] ==position[1] - 18 and list(dict2.values())[0] == list(dict1.values())[0] - 9 and ' ' in dict2)):
                            return True
            elif x == 1:
                if (list(dict1.values())[0] == antiop(position[1], 9) and ((antikey in dict1) or (antidamkey in dict1)) or 
                (list(dict1.values())[0] == antiop(position[1], 11) and ((antikey in dict1) or (antidamkey in dict1)))):
                    for index2, dict2 in enumerate(field):
                        if ((list(dict2.values())[0] ==  antiop(position[1], 22) and list(dict2.values())[0] == antiop(list(dict1.values())[0], 11) and ' ' in dict2) or
                        (list(dict2.values())[0] == antiop(position[1], 18) and list(dict2.values())[0] == antiop(list(dict1.values())[0], 9) and ' ' in dict2)):
                            return True
        

        return False

bot.polling(none_stop=True, interval=0)
